// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model BlogPost {
  id             String          @id @default(uuid())
  title          String
  description    String          @default("No description provided.")
  content        String
  featured       String          @default("false")
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  genre          String?
  blogPostImages BlogPostImage[]
  Comment        Comment[]
}

model Image {
  id             String          @id // Immich UUID
  status         String
  blogPostImages BlogPostImage[]
}

model BlogPostImage {
  blogPost   BlogPost @relation(fields: [blogPostId], references: [id])
  blogPostId String

  image   Image  @relation(fields: [imageId], references: [id])
  imageId String

  @@id([blogPostId, imageId]) // Composite primary key
}

model User {
  id                    String           @id @default(uuid())
  email                 String           @unique
  password              String
  username              String           @unique
  first_name            String
  last_name             String
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  role                  String             @default("user")
  contactMessages       ContactMessage[]
  Comment               Comment[]
  Like                  Like[]
  receivedNotifications Notification[]   @relation("NotificationRecipient")
  sentNotifications     Notification[]   @relation("NotificationActor")
}

model ContactMessage {
  id        String   @id @default(uuid())
  name      String
  email     String
  subject   String
  message   String
  userId    String? // Foreign key to User, optional
  createdAt DateTime @default(now())
  read      Boolean  @default(false)

  user User? @relation(fields: [userId], references: [id])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false) // ðŸ‘ˆ soft-delete flag

  post   BlogPost @relation(fields: [postId], references: [id])
  postId String

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  parentId String?
  replies  Comment[] @relation("CommentReplies")

  likes        Like[]         @relation("CommentLikes")
  Notification Notification[]
}

model Like {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String

  comment   Comment @relation("CommentLikes", fields: [commentId], references: [id], onDelete: Cascade)
  commentId String

  createdAt DateTime @default(now())

  @@unique([userId, commentId]) // Prevent double-liking
}

model Notification {
  id      String           @id @default(cuid())
  type    NotificationType
  message String
  read    Boolean          @default(false)

  /// This is the recipient of the notification
  user   User   @relation("NotificationRecipient", fields: [userId], references: [id])
  userId String

  /// This is the actor who triggered the notification (e.g., someone who liked or replied)
  actor   User   @relation("NotificationActor", fields: [actorId], references: [id])
  actorId String

  comment   Comment? @relation(fields: [commentId], references: [id])
  commentId String?

  createdAt DateTime @default(now())
}

enum NotificationType {
  LIKE
  REPLY
}

enum Role {
  user
  admin
}
